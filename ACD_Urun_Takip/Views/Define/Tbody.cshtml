@model ACD_Urun_Takip.Models.DefineTable
@using ACD_Urun_Takip.Extensions

<style>
    .table-scrollable {
        border: 0 !important;
    }

    .tabletools-dropdown-on-portlet {
        display: none !important;
    }

    tbody tr[role=row] {
        display: none;
    }

    thead {
        white-space: nowrap !important;
    }

        thead th {
            text-align: center !important;
        }

    #defineTbl tr td:first-child {
        text-align: center;
    }

    #defineTbl tbody tr {
        text-align: center;
    }

    .a-image {
        color: #007bff;
        border-color: #007bff;
        padding-left: 10px;
        padding-right: 10px;
    }

        .a-image:hover {
            color: #fff;
            background-color: #007bff;
        }

        .a-image i {
            padding-right: 10px;
        }

    #defineTbl tbody tr td {
        padding: 8px !important;
        line-height: 1.42857143 !important;
    }
</style>
<table class="table table-striped table-bordered table-hover" id="defineTbl" style="width:100%">
    <thead>
        <tr>
            <th style="display:none;"></th>
            <th class="no-sort" style="width:20px!important;">
                <button type='button' class='btn btn-icon-only btn-circle green' id='searchBtn'>
                    <i class='fa fa-search'></i>
                </button>
            </th>
            @foreach (dynamic item in Model.Body)
            {
                foreach (var prop in item as IDictionary<string, object>)
                {
                    if (prop.Key.EndsWith("GuID"))
                    {
                        continue;
                    }
                    <th>@Html.GetLang(prop.Key)</th>
                }
            }
        </tr>
        <!--Filter-->
        <tr id="filterRow" style="display:none;">
            <th id="checkTd" style="display:none;"></th>
            <th class="no-sort"></th>
            @foreach (dynamic item in Model.Body)
            {
                foreach (var prop in item as IDictionary<string, object>)
                {
                    if (!prop.Key.EndsWith("GuID"))
                    {
                        <th name="@prop.Key" opname="@Html.GetLang(prop.Key)" exname='[@prop.Key.Replace(" ", "$£₺€") ]'>@Html.GetLang(prop.Key)</th>

                    }
                }
                break;
            }
        </tr>
    </thead>
    <tbody><tr></tr></tbody>
</table>
<input type="text" style="display:none;" id="temprory" value="@Model.Name" />
<script>
    var aoDataParams;
    var sSourceParams;
    var defineTable = $("#defineTbl");

    $(document).on("click", "#searchBtn", function () {
        if ($("#filterRow").is(":visible")) {
            $("#filterRow").hide(600);
        }
        else {
            $("#filterRow").show(600);
        }

    });

    $(document).ready(function () {
        console.log("ready start");
        //Datatable extension
        $.extend(!0, $.fn.DataTable.TableTools.classes, {
                container: "btn-group tabletools-dropdown-on-portlet",
                buttons: {
                    normal: "btn btn-sm default",
                    disabled: "btn btn-sm default disabled"
                },
                collection: {
                    container: "DTTT_dropdown dropdown-menu tabletools-dropdown-menu"
                }
        });
        console.log("table start");
       
        var table = $("#defineTbl").DataTable({
            lengthMenu: [[10, 20, 50, 100, 500], [10, 20, 50, 100, 500]],
            orderCellsTop: !0,
            columnDefs: [{
                targets: "no-sort",
                orderable: !1
            }],
            language: {
            aria: {
                sortAscending: ": activate to sort column ascending",
                sortDescending: ": activate to sort column descending"
            },
                 emptyTable: "@Html.GetLang("emptyTable")",
                 info: "@Html.GetLang("datatable_info")",
                 infoEmpty: "@Html.GetLang("infoEmpty")",
                 infoFiltered: "@Html.GetLang("infoFiltered")",
                 lengthMenu: "@Html.GetLang("lengthMenu")",
                 search: "@Html.GetLang("datatable_search")",
                 zeroRecords: "@Html.GetLang("zeroRecords")"
            },
            initComplete: function () {

                var api = this.api();

                $('#defineTbl_1_filter input')
                    .off('.DT')
                    .on('keyup.DT', function (e) {
                        var keyCode = e.keyCode ? e.keyCode : e.which;
                        if (this.value == "") {
                            api.search(this.value).draw();
                        }
                        if (keyCode == 13) {
                            api.search(this.value).draw();
                        }
                    });

                $("#defineTbl_filter input").bind("mouseup", function (e) {
                    var $input = $(this),
                        oldValue = $input.val();

                    if (oldValue == "") return;

                    // When this event is fired after clicking on the clear button
                    // the value is not cleared yet. We have to wait for it.
                    setTimeout(function () {
                        var newValue = $input.val();

                        if (newValue == "") {
                            api.search("").draw();
                        }
                    }, 1);
                });

            },
            processing: true,
            serverSide: true,
            info: true,
            stateSave: false,
            scrollY: '63vh',
            "scrollX": true,
            scrollCollapse: true,
            fixedHeader: true,
            PaginationType: "full_numbers",
            "sAjaxSource": '@Url.Action("AjaxGetJsonData","Define")',
            "fnServerData": function (sSource, aoData, fnCallback) {
                aoData.push({ "name": "tablename", "value": $("#temprory").val() });
                aoData.push({ "name": "orders", "value": $("#defineTbl").dataTable().fnSettings().aaSorting })
                var col_array = [];
                $(".colfilter").each(function () {

                    if ($(this).val() != "") {

                        col_array.push($(this).attr("name") + " LIKE '%" + $(this).val() + "%'");
                    }

                })
                aoData.push({ "name": "columnsearch", "value": col_array.join(" AND ") })
                aoDataParams = aoData;
                sSourceParams = sSource;
                $.ajax({
                    url: sSource,
                    type: "POST",
                    data: aoData,
                    error: function () {
                        toastr.error("Beklenmedik bir hata oluştu");
                    },
                    success: function (msg) {
                        if (msg.Success == false) {
                           ShowMessage(msg)
                        }
                        else {
                            fnCallback(msg);
                            $("#defineTbl").find("tbody").html(msg.data);
                            $("#defineTbl_processing").hide();
                            Initialize();


                        }
                    }
                });
            },
            dom: "<'row'<'col-md-12'T>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>"
        });
        console.log("Table end ");
        console.log("Define Start");
        DefineColFilters();
        console.log("Define Endi");
        Initialize();
        console.log("Inıtialezd");
        //Method was run again to ensure body and heading harmony.
        let lastHeight = $(".content-wrapper").first().height();
        let lastWidth = $(".content-wrapper").first().width();

        function checkHeightChange() {
            newHeight = $(".content-wrapper").first().height();
            newWidth = $(".content-wrapper").first().width();

            if (lastHeight != newHeight || lastWidth != newWidth) {
                $(window).resize();

                // assign the new dimensions
                lastHeight = newHeight;
                lastWidth = newWidth;
            }
        }

        setInterval(checkHeightChange, 1000);

        function stopPropagation(e) {
            void 0 !== e.stopPropagation ? e.stopPropagation() : e.cancelBubble = !0
        }


    $("#filterTbl_wrapper").find(".dataTables_length select").select2(), $("#filterTbl thead input").on("keyup", function () {
        e.column($(this).parent().index() + ":visible").search(this.value).draw();
    })

    //?
    //$('.deee').change(function () {
    //    fnShowHide(parseInt($(this).attr("data-column")));

    //});

    });

    function Initialize() {
        //TODO:secili class name değiştirildi tr-selected
        $('input[type="checkbox"].icheck').iCheck({
            checkboxClass: "icheckbox_square-blue"
        });

        $("input[type='checkbox'].icheck").on("ifToggled", function () {
            $(this).iCheck("update")[0].checked ? $(this).closest("tr").addClass("tr-selected") : $(this).closest("tr").removeClass("tr-selected")
        });

        $(window).resize();

    }

    function fnShowHide(iCol) {
        /* Get the DataTables object again - this is not a recreation, just a get of the object */
        var oTable = $('#filterTbl').dataTable();
        var bVis = oTable.fnSettings().aoColumns[iCol].bVisible;
        oTable.fnSetColumnVis(iCol, bVis ? false : true);
    }

    function DefineColFilters() {
        var tables = $('.table');
        var tbl = tables[0];
        $(tbl).attr('id', 'filterTbl');//TODO sample_2 ismi değişti
        $("#filterTbl thead tr#filterrow th:not(:eq(1))").each(function () {
            var filterText = $("#filterTbl thead th").eq($(this).index()).text();
            var name = $(this).attr('name');
            if (filterText != "Resim") {
                if (isIE) {
                    $(this).html('<input type="text" class="form-control colfilter" onclick="stopPropagation(event);" name="' + name + '" />');
                }
                else {
                    $(this).html('<input type="text" class="form-control colfilter" onclick="stopPropagation(event);" placeholder="' + filterText + '" name="' + name + '" />');
                }

            }
            else
                $(this).html('');

        });
    }

    function RefreshTbody() {
            $.ajax({
                url: sSourceParams,
                type: "POST",
                data: aoDataParams,
                error: function () {
                    toastr.error("Beklenmedik bir hata oluştu");
                },
                success: function (msg) {
                    if (msg.Success == false) {
                        ShowMessage(msg)
                    }
                    else {
                        $("#defineTbl").find("tbody").html(msg.data);
                        $("#defineTbl_processing").hide();
                        $("#updateModal").modal("hide");
                        Initialize();
                    }
                }
            });
        }


</script>